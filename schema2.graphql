#   log
#   identification application server
#       - plateforme (Android, iOS)
#       - Device (iPhone 6G, iPad Air)
#       - Applcation Version

# SDK/API deezer
# google API

type Artist {
    id: Int
    name: String
    # url
    link: String
    # url
    share: String
    # url
    pictre: String
    # url
    picture_small: String
    # url
    picture_medium: String
    # url
    picture_big: String
    # url
    picture_xl: String
    nb_album: Int
    nb_fan: Int
    radio: Boolean
    # url
    tracklist: String
    role: String
}

type Album {
    id: Int
    title: String
    upc: String
    # url
    link: String
    # url
    share: String
    # url
    cover: String
    # url
    cover_smal: String
    # url
    cover_medium: String
    # url
    cover_big: String
    # url
    cover_xl: String
    genre_id: Int
    genres: [String]
    label: String
    nb_tracks: Int
    duration: Int
    fans: Int
    rating: Int
    # date
    release_date: String
    record_type: String
    available: Boolean
    alternative: Album
    # url
    tracklist: String
    explicit_lyrics: Boolean
    # TODO enum
    explicit_content_lyrics: Int
    explicit_content_cover: Int
    contributors: [Artist]
    artist: Artist
    tracks: [Track]
}

type Track {
    id: Int
    readable: Boolean
    title: String
    title_short: String
    title_version:String
    unseen: Boolean
    isrc: String
    # url
    link: String
    # url
    share: String
    duration: Int
    track_position: Int
    disck_number: Int
    rank: Int
    # Date
    release_date: String
    explicit_lyrics: Boolean
    explicit_content_lyrices: Int
    explicit_content_cover: Int
    # url
    preview: String
    bpm: Float
    gain: Float
    available_countries: [String]
    alternative: Track
    contributors: [Artist]
    artist : Artist
    album: Album
}

enum MusicGenre {
    POP
    ROCK
    CLASSIC
    RAP
}

type Music {
    name: String!
    album: [String!]!
}

# Private, Amis, Public ?
type User {
    userName: String!
    # Private.
    email: String!
    friends: [User!]!
    prefMusical: [MusicGenre!]!
}

enum Access {
    PRIVATE
    AMIS
    PUBLIC
}

type Horaire {

}

type Location {

}

type VoteResult {

}

# Vote up and Down
type TrackVoteEvent {
    access: Access
    # user can go one event
    users: [User!]!
    # user can vote
    voter: [User!]!
    horaire: Horaire!
    location: Location!
    voteResult: VoteResult!
    currentMuic: Music!
}

type PlaylistEditor {
    access: Access

}

type Query {
    TrackVoteEventsPublic: [TrackVoteEvent!]!
    TrackVoteEventById(id: String!): TrackVoteEvent!
    # get private event that the user can go one.
    TrackVoteEventByUserName(userName: String!): TrackVoteEvent!

    # appareil sp√©cifique
    ControlDelegation: String!

    PlaylistEditorsPublic: [PlaylistEditor!]!
    PlaylistEditorById(id: String): PlaylistEditor!
    PlaylistEditorByUserName(userName: String!): PlaylistEditor!

    UserById(id: String!) :User!
}

# Mutation

type ConnectResult {
    userName: String!
    email: String!
    success: Boolean!
    token: String!
}

type SignUpResult {
    userName: String!
    email: String!
    success: Boolean!
    token: String!
}

type Mutation {
    ConnectByUserName(userName: String!, pass: String!): ConnectResult!
    ConnectByEmail(email: String!, pass: String!): ConnectResult!

    # Verif email.
    SignUp(email: String!, pass: String!): SignUpResult!
    SignUpByGoogle(email: String!, pass: String!): SignUpResult!

    TrackVoteEventVote(musicId: String, b:Boolean): VoteResult!

    # on master that delegu to one or more ?
    ControlDelegationDeleg(userId: String!, apareilId: String!, b:Boolean) : String!

    PlaylistEditorMoveMusic(playlistId: String!, musicId: String!, pos:Int): String!

}
